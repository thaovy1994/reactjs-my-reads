{"ast":null,"code":"import { useRef as r, useEffect as n, useMemo as t, useReducer as e, useCallback as u } from \"react\";\nfunction c(e, u, c) {\n  var i = this,\n    a = r(null),\n    o = r(0),\n    f = r(null),\n    l = r([]),\n    v = r(),\n    m = r(),\n    d = r(e),\n    g = r(!0);\n  d.current = e;\n  var p = \"undefined\" != typeof window,\n    w = !u && 0 !== u && p;\n  if (\"function\" != typeof e) throw new TypeError(\"Expected a function\");\n  u = +u || 0;\n  var s = !!(c = c || {}).leading,\n    x = !(\"trailing\" in c) || !!c.trailing,\n    h = (\"maxWait\" in c),\n    y = \"debounceOnServer\" in c && !!c.debounceOnServer,\n    F = h ? Math.max(+c.maxWait || 0, u) : null;\n  n(function () {\n    return g.current = !0, function () {\n      g.current = !1;\n    };\n  }, []);\n  var A = t(function () {\n    var r = function (r) {\n        var n = l.current,\n          t = v.current;\n        return l.current = v.current = null, o.current = r, m.current = d.current.apply(t, n);\n      },\n      n = function (r, n) {\n        w && cancelAnimationFrame(f.current), f.current = w ? requestAnimationFrame(r) : setTimeout(r, n);\n      },\n      t = function (r) {\n        if (!g.current) return !1;\n        var n = r - a.current;\n        return !a.current || n >= u || n < 0 || h && r - o.current >= F;\n      },\n      e = function (n) {\n        return f.current = null, x && l.current ? r(n) : (l.current = v.current = null, m.current);\n      },\n      c = function r() {\n        var c = Date.now();\n        if (t(c)) return e(c);\n        if (g.current) {\n          var i = u - (c - a.current),\n            f = h ? Math.min(i, F - (c - o.current)) : i;\n          n(r, f);\n        }\n      },\n      A = function () {\n        if (p || y) {\n          var e = Date.now(),\n            d = t(e);\n          if (l.current = [].slice.call(arguments), v.current = i, a.current = e, d) {\n            if (!f.current && g.current) return o.current = a.current, n(c, u), s ? r(a.current) : m.current;\n            if (h) return n(c, u), r(a.current);\n          }\n          return f.current || n(c, u), m.current;\n        }\n      };\n    return A.cancel = function () {\n      f.current && (w ? cancelAnimationFrame(f.current) : clearTimeout(f.current)), o.current = 0, l.current = a.current = v.current = f.current = null;\n    }, A.isPending = function () {\n      return !!f.current;\n    }, A.flush = function () {\n      return f.current ? e(Date.now()) : m.current;\n    }, A;\n  }, [s, h, u, F, x, w, p, y]);\n  return A;\n}\nfunction i(r, n) {\n  return r === n;\n}\nfunction a(r, n) {\n  return n;\n}\nfunction o(n, t, o) {\n  var f = o && o.equalityFn || i,\n    l = e(a, n),\n    v = l[0],\n    m = l[1],\n    d = c(u(function (r) {\n      return m(r);\n    }, [m]), t, o),\n    g = r(n);\n  return f(g.current, n) || (d(n), g.current = n), [v, d];\n}\nfunction f(r, n, t) {\n  var e = void 0 === t ? {} : t,\n    u = e.leading,\n    i = e.trailing;\n  return c(r, n, {\n    maxWait: n,\n    leading: void 0 === u || u,\n    trailing: void 0 === i || i\n  });\n}\nexport { o as useDebounce, c as useDebouncedCallback, f as useThrottledCallback };","map":{"version":3,"sources":["../src/useDebouncedCallback.ts","../src/useDebounce.ts","../src/useThrottledCallback.ts"],"names":["func","wait","options","lastCallTime","useRef","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","isClientSize","window","useRAF","leading","trailing","maxing","debounceOnServer","maxWait","Math","max","useEffect","debounced","useMemo","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","isInvoking","_this","cancel","clearTimeout","isPending","flush","valueEquality","left","right","reducer","_","action","value","delay","eq","equalityFn","_useReducer","state","dispatch","useReducer","useDebouncedCallback","useCallback","previousValue","useThrottledCallback","_temp","_ref$leading","_ref$trailing"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => void;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function `debounced.callback` return the result of the last func invocation.\n * Note, that if there are no previous invocations it's mean you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSize = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSize;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSize && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSize,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useReducer } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nfunction reducer<T>(_: T, action: T) {\n  return action;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const [state, dispatch] = useReducer(reducer, value);\n  const debounced = useDebouncedCallback(\n    useCallback((value: T) => dispatch(value), [dispatch]),\n    delay,\n    options\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [state as T, debounced];\n}\n","import useDebouncedCallback, {\n  CallOptions,\n  DebouncedState,\n} from './useDebouncedCallback';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame).\n *\n * The throttled function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the throttled function.\n *\n * Subsequent calls to the throttled function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const { callback } = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={callback}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait: number,\n  { leading = true, trailing = true }: CallOptions = {}\n): DebouncedState<T> {\n  return useDebouncedCallback(func, wait, {\n    maxWait: wait,\n    leading,\n    trailing,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}